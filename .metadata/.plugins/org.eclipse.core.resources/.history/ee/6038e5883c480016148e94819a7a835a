/*新的开始，第九部分*/
package basePackage;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class newTrip extends JFrame{
	private Vector<JLabel> tree;
	private Vector<JLabel> land;
	private Vector<JLabel> montain;
	private Vector<JLabel> sea;
	private Vector<JLabel> Hourse;
	private Vector<JLabel> person;
	private int [][]matrix;
	public newTrip(){
		tree = new Vector<>();
		land = new Vector<>();
		montain = new Vector<>();
		sea = new Vector<>();
		Hourse = new Vector<>();
		person = new Vector<>();
		matrix = new int[LenthAll.COUNT_ROW][LenthAll.COUNT_COL];
		matrix = readTxtFile.readFile("src/MapSource/wolongMap.txt");
		setTitle("第二章：流年似水不敢忘");
		Toolkit tool = getToolkit();
		Dimension dim = tool.getScreenSize();
		setBounds(0, 0, LenthAll.WINDOW_WIDTH, LenthAll.WINDOW_HEIGHT);
		this.setLocation((int) (dim.getWidth() - LenthAll.WINDOW_WIDTH) / 2,
				(int) (dim.getHeight() - LenthAll.WINDOW_HEIGHT) / 2);// 设置当前窗口在屏幕的正中央
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent event) {
				System.exit(0);
			}
		});// 设置关闭程序监听
		JPanel jp = (JPanel) getContentPane();
		this.setResizable(false);// 固定窗口大小，不可伸缩，最大化
		setVisible(true);
		//------------------------------------------------------------
		ImageIcon icon = new ImageIcon("src/imageSource/reunit.jpeg");//梦中照片
		ImageIcon icon_1 = new ImageIcon("src/imageSource/卧室.jpg");//房间内的照片
		ImageIcon icon_2 = new ImageIcon("src/imageSource/卧龙居.jpg");//卧龙居房间
		ImageIcon icon_3 = new ImageIcon("src/imageSource/战斗.jpg");//伏刃战斗
		ImageIcon icon_4 = new ImageIcon("src/imageSource/万里飘香.jpg");//万里飘香酒楼
		
		JLabel hero = new JLabel(icon);
		JLabel inHome = new JLabel(icon_1);
		JLabel wolongHome = new JLabel(icon_2);
		JLabel war_furen = new JLabel(icon_3);
		JLabel wanlipiaoxiang = new JLabel(icon_4);
		
		jp.add(hero);
		jp.validate();
		MyDialog.showMessageDialog("                       娘亲…………………… ", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		hero.setVisible(false);
		jp.add(inHome);
		jp.validate();
		MyDialog.showMessageDialog("              呼呼………………………………原来又是梦…………", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		inHome.setVisible(false);
		jp.add(war_furen);
		jp.validate();
		MyDialog.showMessageDialog("         六年前，九叔带我离开离云镇，却不料途中遭人埋伏，九叔舍\n    弃性命，保我于危难之中！", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		war_furen.setVisible(false);
		jp.add(wanlipiaoxiang);
		MyDialog.showMessageDialog("        于是独自一人前往万里飘香，却被人拒于门外，由于娘亲送我的\n    玉佩，才得偶遇师傅-卧龙子！", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("        我请教师傅父母下落，师傅却不多言，要我与他习武十年，便放\n    我去寻找答案。", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		wanlipiaoxiang.setVisible(false);
		jp.add(wolongHome);
		jp.validate();
		MyDialog.showMessageDialog("        光阴似箭，流年似水，今年已是在卧龙居的第六个年头，师傅未\n    曾交我一招一式，但却着重让我做卧龙居的一切体力活，所以身\n    体强壮，已非同龄人可比。", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		wolongHome.setVisible(false);
		inHome.setVisible(true);
		jp.validate();
		MyDialog.showMessageDialog("                         徒儿？…………徒儿，臭小子还在睡觉吗？", "一声呼唤", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("                         砰!(推门而入)    你小子怎么一脸哀愁", "卧龙子", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("                        没事，师傅，梦见娘亲了而已", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("              命中多事，何须强求,对了对了,你去林间打点野兔，最近几\n       天咱们都未触荤了！", "卧龙子",LenthAll.TALK_DIALOG_WIDTH,LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("                     ...........", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
	}
	
	private void init(int[][] matrix) {
		ImageIcon tree = new ImageIcon("src/imageSource/森林.png");
		ImageIcon mountain = new ImageIcon("src/imageSource/众山.png");
		ImageIcon land = new ImageIcon("src/imageSource/草地.png");
		ImageIcon person = new ImageIcon("src/imageSource/燕南征行.jpg");
		ImageIcon sea = new ImageIcon("src/imageSource/海洋.png");
		ImageIcon hourse = new ImageIcon("src/imageSource/house_1.jpg");
		for(int i = 0; i < LenthAll.COUNT_ROW;i++)
			for(int j = 0;j < LenthAll.COUNT_COL;j++){
				if(matrix[i][j] == MapDeploy.BOSS_ON){
					JLabel J_BOOS = new JLabel(boss);
					Boss.add(J_BOOS);
				}
				else if(matrix[i][j] == MapDeploy.TREE_ON){
					JLabel J_TREE = new JLabel(tree);
					Tree.add(J_TREE);
				}
				else if(matrix[i][j] == MapDeploy.PERSON_STAND){
					JLabel J_PERSON = new JLabel(person);
					Person.add(J_PERSON);
				}
				else if(matrix[i][j] == MapDeploy.GRASSLAND_ON){
					JLabel J_LAND = new JLabel(land);
					Land.add(J_LAND);
				}
				else if(matrix[i][j] == MapDeploy.PERSON_TWO_STAND){
					JLabel J_PERSON_TWO = new JLabel(person_two);
					Person_two.add(J_PERSON_TWO);
				}
			}
	}
	
	private void paintMap(int [][]matrix,JPanel jp){
		int count_tree = 0;
		int count_land = 0;
		for(int i = 0; i < LenthAll.COUNT_ROW;i++){
			for(int j = 0; j < LenthAll.COUNT_COL;j++){
				switch (matrix[i][j]) {
				case MapDeploy.BOSS_ON:
					Boss.get(0).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(Boss.get(0));
	            	boss_x = i;
	            	boss_y = j;
					break;
				case MapDeploy.GRASSLAND_ON:
					Land.get(count_land).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(Land.get(count_land++));
					break;
				case MapDeploy.TREE_ON:
					Tree.get(count_tree).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(Tree.get(count_tree++));
	            	break;
				case MapDeploy.PERSON_STAND:
					Person.get(0).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(Person.get(0));
					break;
				case MapDeploy.PERSON_TWO_STAND:
					Person_two.get(0).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT, LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
					jp.add(Person_two.get(0));
				default:
					break;
				}
			}
		}
	}
}
