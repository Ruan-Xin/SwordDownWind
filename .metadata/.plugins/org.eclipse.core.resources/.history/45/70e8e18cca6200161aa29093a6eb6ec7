/*新的开始，第九部分*/
package basePackage;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.lang.invoke.ConstantCallSite;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import PersonAll.Hero;
import PersonAll.PersonAll;
import dialogPackage.ProcessDialog;
import warFrame.monster_fight;

public class newTrip extends JFrame implements ActionListener{
	private int Person_x;
	private int Person_y;
	private Hero player;
	private final String blank = "                                                 ";
	private static final int fightHead_x = LenthAll.WINDOW_WIDTH - 200;
	private static final int fightHead_y = 0;
	private static final int fightHead_image_width = 200;
	private static final int fightHead_image_height = 190;
	private static final int WIDTH = 80;
	private static final int HEIGHT = 20;
	private JButton Goods;
	private JButton exit;
	private JLabel duty;
	private Vector<JLabel> tree;
	private Vector<JLabel> land;
	private Vector<JLabel> montain;
	private Vector<JLabel> sea;
	private Vector<JLabel> hourse;
	private Vector<JLabel> person;
	private int [][]matrix;
	private int [][]monster;
	private static int count_duty = 0;//主线任务，兔肉的数量
	private Vector<Integer> numVc;//monster select;
	private Vector<JLabel> heroInfo;
	public newTrip(){
		tree = new Vector<>();
		land = new Vector<>();
		montain = new Vector<>();
		sea = new Vector<>();
		hourse = new Vector<>();
		person = new Vector<>();
		numVc = new Vector<>();
		matrix = new int[LenthAll.COUNT_ROW][LenthAll.COUNT_LATER_COL];
		monster = new int[LenthAll.COUNT_ROW][LenthAll.COUNT_LATER_COL];
		matrix = readTxtFile.readFile("src/MapSource/wolongMap.txt");
		player = new Hero();
		numVc.add(0);
		heroInfo = HeroInfo.initInfo();

		setTitle("第二章：流年似水不敢忘");
		Toolkit tool = getToolkit();
		Dimension dim = tool.getScreenSize();
		setBounds(0, 0, LenthAll.WINDOW_WIDTH, LenthAll.WINDOW_HEIGHT);
		this.setLocation((int) (dim.getWidth() - LenthAll.WINDOW_WIDTH) / 2,
				(int) (dim.getHeight() - LenthAll.WINDOW_HEIGHT) / 2);// 设置当前窗口在屏幕的正中央
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent event) {
				System.exit(0);
			}
		});// 设置关闭程序监听
		JPanel jp = (JPanel) getContentPane();
		this.setResizable(false);// 固定窗口大小，不可伸缩，最大化
		setVisible(true);
		//------------------------------------------------------------
		ImageIcon icon = new ImageIcon("src/imageSource/reunit.jpeg");//梦中照片
		ImageIcon icon_1 = new ImageIcon("src/imageSource/卧室.jpg");//房间内的照片
		ImageIcon icon_2 = new ImageIcon("src/imageSource/卧龙居.jpg");//卧龙居房间
		ImageIcon icon_3 = new ImageIcon("src/imageSource/战斗.jpg");//伏刃战斗
		ImageIcon icon_4 = new ImageIcon("src/imageSource/万里飘香.jpg");//万里飘香酒楼

		
		JLabel hero = new JLabel(icon);
		JLabel inHome = new JLabel(icon_1);
		JLabel wolongHome = new JLabel(icon_2);
		JLabel war_furen = new JLabel(icon_3);
		JLabel wanlipiaoxiang = new JLabel(icon_4);

		
		jp.add(hero);
		jp.validate();
		MyDialog.showMessageDialog("                       娘亲…………………… ", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		hero.setVisible(false);
		jp.add(inHome);
		jp.validate();
		MyDialog.showMessageDialog("              呼呼………………………………原来又是梦…………", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		inHome.setVisible(false);
		jp.add(war_furen);
		jp.validate();
		MyDialog.showMessageDialog("         六年前，九叔带我离开离云镇，却不料途中遭人埋伏，九叔舍\n    弃性命，保我于危难之中！", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		war_furen.setVisible(false);
		jp.add(wanlipiaoxiang);
		MyDialog.showMessageDialog("        于是独自一人前往万里飘香，却被人拒于门外，由于娘亲送我的\n    玉佩，才得偶遇师傅-卧龙子！", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("        我请教师傅父母下落，师傅却不多言，要我与他习武十年，便放\n    我去寻找答案。", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		wanlipiaoxiang.setVisible(false);
		jp.add(wolongHome);
		jp.validate();
		MyDialog.showMessageDialog("        光阴似箭，流年似水，今年已是在卧龙居的第六个年头，师傅未\n    曾交我一招一式，但却着重让我做卧龙居的一切体力活，所以身\n    体强壮，已非同龄人可比。", "回忆", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		wolongHome.setVisible(false);
		inHome.setVisible(true);
		jp.validate();
		MyDialog.showMessageDialog("                         徒儿？…………徒儿，臭小子还在睡觉吗？", "一声呼唤", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("                         砰!(推门而入)    你小子怎么一脸哀愁", "卧龙子", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("                        没事，师傅，梦见娘亲了而已", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("              命中多事，何须强求,对了对了,你去林间打点野兔，最近几\n       天咱们都未触荤了！", "卧龙子",LenthAll.TALK_DIALOG_WIDTH,LenthAll.TALK_DIALOG_HEIGHT);
		MyDialog.showMessageDialog("                     ...........", "燕惊寒", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
		inHome.setVisible(false);
		jp.setLayout(null);
		
		init(matrix);
		paintMap(matrix, jp);

		initLabel(jp);
		jp.updateUI();
		Monster ms = new Monster();//怪物信息类
		count_duty = 9;
		monster = ms.monster_distribution(matrix, monster, 20);//在该地图的可行区域，有20个怪物
		this.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e){
				matrix = MoveLogic.moveStrategy(matrix, e.getKeyCode(), Person_x, Person_y);
				paintMap(matrix, jp);updataInfo();
				jp.updateUI();
				if(count_duty == 10){
					if(Person_x == 4 && Person_y == 1){
						MyDialog.showMessageDialog("                              师傅，我回来啦", "任务", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
						MyDialog.showMessageDialog("              嘿嘿，好徒儿，今天中午可以开荤了，快把我藏的那两坛好\n      酒拿出来！", "任务", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
						setVisible(false);
						new Kongfu(player);
					}
				}
				else{
					if(monster[Person_x][Person_y] == 1){
						monster_fight mf = new monster_fight(new Hero(),new Monster(),numVc);
						mf.setVisible(true);
						Thread tf = new Thread(new Runnable() {		//异步回调
							@Override
							public void run() {
								// TODO Auto-generated method stub
								while(mf.isVisible()){
									System.out.println("1");
								}
								if(Math.random() > 0.25){
									MyDialog.showMessageDialog(blank + "获得兔肉", "提示", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);	
									count_duty++;
								}
								if(count_duty == 10){
									MyDialog.showMessageDialog("                  " + "师傅交代的任务完成了，赶快回去吧！", "任务", LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
									monster = ms.mosnter_clear(monster);
								}
							}
						});
						tf.start();
					}
				}
			}
		});
	}
	
	private void initLabel(JPanel jp){
		for(int i = 0; i < heroInfo.size();i++){
			jp.add(heroInfo.get(i));
		}
		duty = new JLabel("<html>主线任务:在卧龙<br/>居附近为师傅打猎兔肉：<html>" + count_duty + "/" + "10");
		exit = new JButton("退出游戏");
		Goods = new JButton("物品");
		duty.setBounds(LenthAll.WINDOW_WIDTH - fightHead_image_width + 60, fightHead_image_height + 180, WIDTH + 30, HEIGHT + 40);
		Goods.setBounds(LenthAll.WINDOW_WIDTH - fightHead_image_width + 60, fightHead_image_height + 260, WIDTH + 20, HEIGHT);
		exit.setBounds(LenthAll.WINDOW_WIDTH - fightHead_image_width + 60, fightHead_image_height + 300, WIDTH + 20, HEIGHT);
		Goods.addActionListener(this);
		exit.addActionListener(this);
		jp.add(duty);
		jp.add(exit);
		jp.add(Goods);
	}
	
	private void updataInfo(){
		HeroInfo.updateInfo(heroInfo);
		duty.setText("<html>主线任务:在卧龙<br/>居附近为师傅打猎兔肉：<html>" + count_duty + "/" + "10");
	}
	
	private void init(int[][] matrix) {
		ImageIcon Tree = new ImageIcon("src/imageSource/森林.png");
		ImageIcon Mountain = new ImageIcon("src/imageSource/众山.png");
		ImageIcon Land = new ImageIcon("src/imageSource/草地.png");
		ImageIcon Person = new ImageIcon("src/imageSource/燕惊寒.jpeg");
		ImageIcon Sea = new ImageIcon("src/imageSource/海洋.png");
		ImageIcon Hourse = new ImageIcon("src/imageSource/house_1.jpg");
		for(int i = 0; i < LenthAll.COUNT_ROW;i++)
			for(int j = 0;j < LenthAll.COUNT_LATER_COL;j++){
				if(matrix[i][j] == MapDeploy.TREE_ON){
					JLabel J_Tree = new JLabel(Tree);
					tree.add(J_Tree);
				}
				else if(matrix[i][j] == MapDeploy.MOUNTAIN_ON){
					JLabel J_Mountain = new JLabel(Mountain);
					montain.add(J_Mountain);
				}
				else if(matrix[i][j] == MapDeploy.GRASSLAND_ON){
					JLabel J_land = new JLabel(Land);
					land.add(J_land);
				}
				else if(matrix[i][j] == MapDeploy.PERSON_STAND){
					JLabel J_Person = new JLabel(Person);
					person.add(J_Person);
				}
				else if(matrix[i][j] == MapDeploy.SEA_ON){
					JLabel J_SEA = new JLabel(Sea);
					sea.add(J_SEA);
				}
				else if(matrix[i][j] == MapDeploy.HOUSE_ON){
					JLabel J_HOURSE = new JLabel(Hourse);
					hourse.add(J_HOURSE);
				}
			}
	}
	
	private void paintMap(int [][]matrix,JPanel jp){
		int count_tree = 0;
		int count_land = 0;
		int count_sea = 0;
		int count_mountain = 0;
		
		for(int i = 0; i < LenthAll.COUNT_ROW;i++){
			for(int j = 0; j < LenthAll.COUNT_LATER_COL;j++){
				switch (matrix[i][j]) {
				case MapDeploy.TREE_ON:
					tree.get(count_tree).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(tree.get(count_tree++));
					break;
				case MapDeploy.GRASSLAND_ON:
					land.get(count_land).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(land.get(count_land++));
					break;
				case MapDeploy.SEA_ON:
					sea.get(count_sea).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(sea.get(count_sea++));
	            	break;
				case MapDeploy.PERSON_STAND:
					Person_x = i;
					Person_y = j;
					person.get(0).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(person.get(0));
					break;
				case MapDeploy.HOUSE_ON:
					hourse.get(0).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT,LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
	            	jp.add(hourse.get(0));
					break;
				case MapDeploy.MOUNTAIN_ON:
					montain.get(count_mountain).setBounds(-10 + j*LenthAll.IMAGE_WIDTH, -10 + i*LenthAll.IMAGE_HEIGHT, LenthAll.IMAGE_WIDTH, LenthAll.IMAGE_HEIGHT);
					jp.add(montain.get(count_mountain++));
				default:
					break;
				}
			}
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getActionCommand().equals("物品")){
			new ProcessDialog();
		}
		else if(e.getActionCommand().equals("退出游戏")){
			MyDialog.showMessageDialog("            记录已保存,点击确定退出游戏。。。。。。。。。。", null, LenthAll.TALK_DIALOG_WIDTH, LenthAll.TALK_DIALOG_HEIGHT);
			System.exit(-1);
		}
	}
}
